{"version":3,"sources":["firebase/firebase-config.js","types/types.js","actions/loading.js","helpers/loadNotes.js","helpers/fileUpload.js","actions/note.js","actions/auth.js","components/hooks/useForm.js","components/notes/NotesAppBar.js","components/notes/NoteScreen.js","components/journal/NothingSelected.js","components/journal/JournalEntry.js","components/journal/JournalEntries.js","components/journal/Sidebar.js","components/journal/JournalScreen.js","components/auth/LoginScreen.js","actions/ui.js","components/auth/RegisterScreeen.js","routers/AuthRouters.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouters.js","reducers/noteReducer.js","reducers/uiReducer.js","store/store.js","reducers/authReducer.js","JournalApp.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","console","log","db","getFirestore","googleAuthProvider","GoogleAuthProvider","types","FinishLoading","type","payload","loadNote","uid","a","getDocs","collection","noteSnap","notes","forEach","snapHijo","push","id","data","fileUpload","file","formData","FormData","append","fetch","method","body","resp","ok","json","cloudResp","url","activeNote","note","addNewNoteSideBar","setNotes","startSaveNote","dispatch","getState","auth","noteToFirestore","noteRef","doc","updateDoc","saveNote","Swal","fire","title","deleteDeRedux","startLoginEmailPassword","email","password","getAuth","signInWithEmailAndPassword","then","user","login","displayName","catch","e","message","logout","useForm","initialState","useState","formulary","setformulary","reset","newFormState","handleInputChange","target","name","value","NotesAppBar","useDispatch","active","useSelector","state","className","style","display","onChange","event","files","text","allowOutsideClick","showConfirmButton","willOpen","showLoading","fileUrl","close","startUpLouding","onClick","document","querySelector","click","NoteScreen","myActiveNote","noteValue","handleNote","activeId","useRef","useEffect","current","placeholder","src","alt","notDelete","deleteDoc","NothingSelected","JournalEntry","date","momentDate","moment","backgroundSize","backgroundImage","format","JournalEntries","map","Sidebar","signOut","newNote","Date","getTime","addDoc","docRef","JournalScreen","LoginScreen","loading","ui","formuValues","onSubmit","preventDefault","disabled","signInWithPopup","to","setError","err","RegisterScreeen","msgError","confirm","registerValues","handleRegister","isFormValid","trim","length","validator","isEmail","createUserWithEmailAndPassword","updateProfile","startRegisterWithEmailNamePassw","AuthRouters","path","component","PrivateRoute","isAuthenticated","Component","rest","props","PublicRoute","AppRouters","cheking","setChecking","isLogeedIn","setisLogeedIn","onAuthStateChanged","exact","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","JournalApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e55fe031.chunk.js","sourcesContent":["import 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { GoogleAuthProvider } from 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAQhjWEZyb1nlDHyNmKpuK3KAc-H7l1i_g\",\r\n    authDomain: \"react-app-journal-e5b32.firebaseapp.com\",\r\n    projectId: \"react-app-journal-e5b32\",\r\n    storageBucket: \"react-app-journal-e5b32.appspot.com\",\r\n    messagingSenderId: \"955437938441\",\r\n    appId: \"1:955437938441:web:0a2cc01d7a0c4c391345d8\"\r\n  };\r\n  \r\n  \r\nconst app = initializeApp(firebaseConfig);\r\nconsole.log(app);\r\n\r\nconst db = getFirestore();\r\n\r\n\r\n/* this is for authentification im google, and it is the sam efor facebook, twiter , github, etc. */\r\nconst googleAuthProvider = new GoogleAuthProvider();\r\n\r\nexport {\r\n    db,\r\n    googleAuthProvider,\r\n}","export const types = {\r\n\r\n    /* authreducer */\r\n    login: '[Auth] Login',\r\n    logout: '[Auth] Logout',\r\n\r\n    /*uiReducer*/\r\n    uiSetError: \"[UI] Set Error\",\r\n    uiRemoveError: \"[UI] Remove Error\",\r\n\r\n    /**/\r\n    uiStartLoading: '[UI] Start loading',\r\n    uiFinishLoading: '[UI] Finish loading',\r\n\r\n    /* Work with notes - Sidebar */\r\n\r\n    noteAddNew : '[Note] New Note',\r\n    noteActive : '[Note] Set active note',\r\n    noteLoad: '[Note] Load Note',\r\n    noteUpDated: '[Note] Note updated',\r\n    noteFileUrl: '[Note] Updated image url',\r\n    noteDelete: '[Note] Delete note',\r\n    noteLogoutCleaning: '[Note] Logout cleaning',\r\n\r\n\r\n}","import { types } from \"../types/types\"\r\n\r\nexport const StartLoading = ()=>{\r\n    return{\r\n        type: types.uiStartLoading,\r\n        payload: true,\r\n    }\r\n} \r\n\r\nexport const FinishLoading = ()=>{\r\n    return{\r\n        type: types.uiFinishLoading,\r\n        payload: false,\r\n    }\r\n} \r\n","import { collection, getDocs } from \"@firebase/firestore\";\r\nimport { db } from \"../firebase/firebase-config\";\r\n\r\n\r\n/* con este helper quiero estructurar la información que recibo del firestore. cuando ejecuto el getDocs recibo \r\nmuchisima infomacion en un objeto gigante del usuario con el uid que estoy pasando, luego con el snaphijo transformo usando el\r\n forEach esa informacion en un objeto pequeño solo con la información que me interesa, para luego hacer push al array. */\r\n\r\n\r\nexport const loadNote = async (uid) =>{\r\n\r\n    const noteSnap = await getDocs(collection(db,`${uid}/journal/notes` ));\r\n    const notes = [];\r\n\r\n    /*snapHijo son cada uno de los elementos dentro del array del console.,*/\r\n\r\n    noteSnap.forEach(snapHijo => {\r\n        \r\n        notes.push({\r\n            id: snapHijo.id,\r\n             ...snapHijo.data()\r\n        })\r\n\r\n    })\r\n\r\n    return notes;\r\n} ","\r\n/* creado para ayudar y reducir el numero de lineas de codigo en el note, precisamente en la accion startUpLouding*/\r\n\r\nconst fileUpload = async (file) =>{\r\n\r\n    \r\n\r\n    const cloudUrl = 'https://api.cloudinary.com/v1_1/ds3b6otk5/upload';\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"upload_preset\", \"react-journal\");\r\n    formData.append (\"file\", file);\r\n\r\n    try {\r\n\r\n        const resp = await fetch(cloudUrl, {\r\n            method : \"POST\",\r\n            body : formData\r\n        });\r\n\r\n        if (resp.ok){\r\n            const cloudResp = await resp.json();\r\n            return cloudResp.url\r\n        } else{\r\n            return null;\r\n        }\r\n\r\n        \r\n    } catch (error) {\r\n       throw error;\r\n        \r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default fileUpload;\r\n\r\n/* resumen para el fetch:\r\nIMPORTANTE POSTMASER SOLO ES PARA OBTENER DATOS, NADA MAS\r\n- creo la funcion que este caso va a recibir el file como atributo (no es mas que el nombre de una imagen en la cpu del usuario). \r\n- creo una constante con el url del API, la cual la usare en el fetch\r\n- creo que FormData(), el cual lo usare para implementarle las query al URL basico del API\r\n- llamo al fetch , poniendole como atributo, el URL base, aclarando que metodo quiero\r\nsi va a ser POST(posteo en el API), GET, o que quiero hacer. Luego le agrego las query dentro de body \r\n- luego obtengo el resp.JSON, lo que me devolvera el url que voy  usar para postear la \r\nimagen en el servidor o sea a travez de mi code. Esta respuesta no es otra cosa que el \r\nobjeto que recibo en POSTMASTER cuando una vez completado los key y values aprieto save y \r\nme tira el OBJETO.\r\n- con este proceso, consigo postear una imagen que esta en la cpu del usuario en el API de imagenes, el URL de \r\ndicha imagen lo usare para agregarlo a la nota actual.\r\n*/\r\n","import { addDoc, collection, deleteDoc, doc, updateDoc } from \"@firebase/firestore\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport { db } from \"../firebase/firebase-config\";\r\nimport { loadNote } from \"../helpers/loadNotes\";\r\nimport { types } from \"../types/types\";\r\n\r\nimport fileUpload from \"../helpers/fileUpload\";\r\n\r\n/* aqui en estas acciones, toda accion con estructura distinta \"que recibe como argumento un dispatch\" van a ser acciones relacionads\r\na vriantes que realizo con mi base de datos, las cuales ser{an llamadas desde los componentes. Por otro lado voy a tener acciones comunes\r\n    donde retorne un type y un payload las cuales van a generr cambion en la pantalla de mi app. Estas acciones seran lammadas dede las \r\n    antesriores acciones que modifican la base de datos*/ \r\n\r\n   //al ser una tarea asincrona, lleva su callback y el dispach en este caso\r\n    // creo tambien el getState (atributo comun), que lo usare para conseguir el id de la persona,\r\n    // y toda la info para gramar en firestore. funciona como el use selector, tmb sera una funcion.\r\n    // con este segundo argumneto consigo el state . (name, uid, todo)\r\n    // este paso agrega la la estructura de la nota al firestore. \r\n    // cuando son asincronas, llevan el dispach y van a ejecutar una accion dentro de si mismas. \r\n\r\nexport const startNewNote = () =>{\r\n\r\n    return async(dispatch , getState) => {\r\n        const {uid} = getState().auth ;\r\n        \r\n        const newNote = {\r\n            title : \"\",\r\n            body : \"\",\r\n            date : new Date().getTime()\r\n\r\n        }\r\n        const docRef = await addDoc(collection(db,`${uid}/journal/notes` ), newNote )\r\n        console.log(docRef);\r\n\r\n        dispatch(activeNote(docRef.id, newNote));\r\n        dispatch (addNewNoteSideBar (docRef.id, newNote));\r\n        \r\n\r\n    }\r\n}\r\n\r\n// activo la nota para luego hacer modificaciones.\r\n//  necesito el id, para poder rellamarla luego si necesito hacer modificaciones.\r\nexport const activeNote = (id, note) =>{\r\n    return {\r\n        type: types.noteActive,\r\n        payload:{\r\n            id,\r\n            ...note\r\n        }\r\n    }\r\n}\r\n\r\nexport const addNewNoteSideBar = (id, note)=>{\r\n    return {\r\n        type: types.noteAddNew,\r\n        payload:{\r\n            id,\r\n            ...note\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/* sera una accion que dispare a otra por lo que necesitaré un dispatch, esta accion me permitira \r\ncargar las notas que setien en el setNotes, el dispach que ejecuta esta ccion esta en AppRouters*/\r\nexport const startLoginNotes =  (uid) =>{\r\n    return async(dispatch) =>{\r\n        const notes = await loadNote(uid);\r\n        dispatch(setNotes(notes))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setNotes = (notes) =>{\r\n    return {\r\n        type:types.noteLoad,\r\n        payload : notes /* sera el array que cree en el hlper loadNotes*/\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const startSaveNote = (note) =>{\r\n    return async (dispatch, getState)=> {\r\n        const {uid} =  getState().auth;\r\n\r\n        if(!note.url){\r\n            delete note.url;\r\n        }\r\n        \r\n\r\n        const noteToFirestore = { ...note};\r\n        delete noteToFirestore.id;\r\n\r\n        const noteRef = doc(db, `${uid}/journal/notes/${note.id}`)\r\n        await updateDoc(noteRef, noteToFirestore); \r\n        dispatch(saveNote(note.id , noteToFirestore))\r\n        Swal.fire(\"Saved\", note.title, \"success\");\r\n    }\r\n}\r\n\r\nexport const saveNote = (id, note) =>{\r\n    return{\r\n        type : types.noteUpDated,\r\n        payload: {\r\n            id,\r\n            note : {\r\n                id,\r\n                ...note\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const startUpLouding =(file) => {\r\n    return async (dispatch , getState) =>{\r\n        const {active:activeNote} =  getState().note;\r\n\r\n        Swal.fire({\r\n            title: 'Uploading...',\r\n            text: 'Please wait...',\r\n            allowOutsideClick: false,\r\n            showConfirmButton: false,\r\n            willOpen: () => {\r\n                Swal.showLoading();\r\n            }\r\n        });\r\n\r\n\r\n        const fileUrl = await fileUpload(file);\r\n        activeNote.url = fileUrl;\r\n\r\n       dispatch(startSaveNote(activeNote))\r\n\r\n       \r\n        Swal.close();\r\n        \r\n    }\r\n\r\n}\r\n\r\n/* la primer función elimina el elemento de firestore, luego creo otra para hacerla desaparecer de redux\r\ny la llamo con el dispatch. */\r\nexport const startDelete = (id) =>{\r\n    return async ( dispatch , getState) =>{\r\n        const {uid} = getState().auth;\r\n        // await db.doc (`${uid}/journal/notes/${id}`).delete();\r\n        const notDelete = doc(db, `${uid}/journal/notes/${id}`)\r\n        await deleteDoc(notDelete)\r\n\r\n        dispatch (deleteDeRedux(id));\r\n    }\r\n}\r\n\r\n\r\nexport const deleteDeRedux = (id) =>{\r\n    return{\r\n        type:types.noteDelete,\r\n        payload: {\r\n            id,\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const initialStateAgain = () =>{\r\n    return {\r\n        type: types.noteLogoutCleaning,\r\n        payload : []\r\n    }\r\n}\r\n\r\n","import { createUserWithEmailAndPassword, getAuth, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"@firebase/auth\";\r\nimport { googleAuthProvider } from \"../firebase/firebase-config\";\r\nimport {types} from '../types/types';\r\nimport { FinishLoading, StartLoading } from \"./loading\";\r\nimport Swal from 'sweetalert2';\r\nimport { initialStateAgain } from \"./note\";\r\n\r\nexport const startLoginEmailPassword = (email,password)=>{\r\n    return (dispatch)=>{\r\n\r\n        dispatch(StartLoading());\r\n        const auth = getAuth();\r\n        signInWithEmailAndPassword(auth, email, password)\r\n        .then(({user})=>{\r\n            dispatch(login(user.uid, user.displayName))\r\n            dispatch(FinishLoading());\r\n        })\r\n        .catch (e => {console.log(e)\r\n            dispatch(FinishLoading());\r\n            Swal.fire(\"Error\", e.message, \"error\");\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const startRegisterWithEmailNamePassw = (name, email, password)=>{\r\n    return (dispatch) => {\r\n        const auth = getAuth();\r\n        createUserWithEmailAndPassword(auth, email, password)\r\n        .then(async({user})=> {\r\n            await updateProfile (user, {displayName:name});\r\n            dispatch(login(user.uid, user.displayName));\r\n        })\r\n\r\n        .catch(e => {console.log(e)\r\n            \r\n            Swal.fire(\"Error\", e.message, \"error\");\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n // el then lanza una respuesta, la cual es un objeto que dentro tiene a user, que\r\n //a su vez dentro tiene items, dos de esos son uid y displayName.\r\nexport const startGoogleLogin = () =>{\r\n    return (dispatch) =>{\r\n        const auth = getAuth();\r\n        signInWithPopup(auth, googleAuthProvider)\r\n            .then(({user}) =>{\r\n                dispatch(login(user.uid, user.displayName))\r\n            });\r\n    }\r\n}\r\n\r\nexport const login = (uid, displayName)=>{\r\n    return {\r\n        type: types.login,\r\n        payload: {\r\n            uid,\r\n            displayName\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const startLogout =  () => {\r\n    return async(dispatch) => {\r\n        const auth = getAuth();\r\n        await signOut(auth);\r\n        dispatch(logout());\r\n        dispatch(initialStateAgain())\r\n\r\n    }\r\n}\r\n\r\n/*devueve un objeto vacío , ver authReducer*/\r\nexport const logout = ()=> {\r\n    return{\r\n        type:types.logout,\r\n    }\r\n}","import { useState } from \"react\";\r\n\r\n\r\nexport const useForm = (initialState={}) => {\r\n    \r\n    const [formulary, setformulary] = useState(initialState);\r\n\r\n    const reset = ( newFormState = initialState) => {\r\n        setformulary(newFormState);\r\n    }\r\n    \r\n    const handleInputChange = ({target})=>{\r\n        setformulary({\r\n            ...formulary,\r\n            [target.name] : target.value\r\n        });\r\n    };\r\n    return [formulary , handleInputChange, reset]\r\n    \r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startSaveNote, startUpLouding } from '../../actions/note'\r\n\r\nexport const NotesAppBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {active} = useSelector(state => state.note)\r\n\r\n    const handleSaveClick = ()=> {\r\n       \r\n        dispatch ( startSaveNote (active));\r\n    }\r\n\r\n    const handlepictureClick = ()=> {\r\n        document.querySelector(\"#fileSelector\").click();\r\n    }\r\n\r\n    const handleFile = (event) => {\r\n        const file = (event.target.files[0]);\r\n        if (file){\r\n            dispatch (startUpLouding(file));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"notes__appbar\">\r\n            <span> 25 Octuber 2021 </span>\r\n            <input \r\n                id = \"fileSelector\"\r\n                type = \"file\"\r\n                style = {{display: \"none\"}}\r\n                onChange = {handleFile}\r\n\r\n            />\r\n\r\n            <div>\r\n                <button\r\n                 className=\"btn\"\r\n                 onClick = {handlepictureClick}\r\n                 >\r\n                    Piture\r\n                </button>\r\n                \r\n                <button\r\n                 className=\"btn\"\r\n                 onClick = {handleSaveClick}\r\n                 >\r\n                    Save\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { activeNote, startDelete } from '../../actions/note';\r\nimport { useForm } from '../hooks/useForm';\r\nimport { NotesAppBar } from './NotesAppBar'\r\n\r\nexport const NoteScreen = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {active:myActiveNote} = useSelector(state => state.note);\r\n    const [noteValue, handleNote , reset] = useForm(myActiveNote);\r\n    /* note es un objeto */\r\n    const {title, body , url } = noteValue;\r\n    const activeId  = useRef(myActiveNote.id)\r\n    \r\n\r\n\r\n\r\n \r\n    /*como el useForm se ejecuta una sola vez y no cada vez que cambia la activeNote del useSelecto, debo ejecutar \r\n    un useEffct para adaptarlo y ejecutarse siempre.\r\n     Importante considerar la relacion useSelector y UseRef, mientras useSelector me da la información cuando se cargó\r\n     la pagina, el useRef, renderiza un objeto especificpo. Así puedo comparar y utilizar if statement par ver que \r\n     cambio y que se debe hacer.\r\n    */\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (myActiveNote.id !== activeId.current) {\r\n            (reset (myActiveNote));\r\n            activeId.current = myActiveNote.id\r\n        }    \r\n    }, [myActiveNote, reset])\r\n\r\n    useEffect(() => {\r\n        dispatch ( activeNote(noteValue, {...noteValue} ) )\r\n        \r\n    }, [noteValue , dispatch])\r\n\r\n    const handleDelete = () =>{\r\n        dispatch (startDelete(myActiveNote.id));\r\n    }\r\n    \r\n   \r\n\r\n    return (\r\n        <div className=\"notes__main-content\">\r\n                <NotesAppBar />\r\n            <div className=\"notes__contents\">\r\n                <input\r\n                    type = \"text\"\r\n                    name = \"title\"\r\n                    placeholder = \"Some awesome title\"\r\n                    className = \"notes__titles-input\"\r\n                    value = {title}\r\n                    onChange = {handleNote}\r\n\r\n                />\r\n                <textarea\r\n                    placeholder=\"What happened today\"\r\n                    className = \"notes__textarea\"\r\n                    name = \"body\"\r\n                    value = {body}\r\n                    onChange = {handleNote}\r\n                ></textarea>\r\n\r\n                { (myActiveNote.url) &&\r\n                    <div className = \"notes__images animate__animated animate__fadeIn animate__faster\">\r\n                    <img \r\n                        src = {myActiveNote.url}\r\n                        alt= \"picture\"\r\n                    />\r\n        \r\n                </div>\r\n                }\r\n\r\n              \r\n\r\n            </div>\r\n            <button \r\n                className = \"btn btn-danger\"\r\n                onClick = {handleDelete}\r\n            > \r\n                Delete\r\n            </button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const NothingSelected = () => {\r\n    return (\r\n        <div className = \"nothing__main-content\">\r\n        <p>\r\n            Select something\r\n            <br />\r\n            or create an entry!\r\n        </p>\r\n        <i className = \"far fa-star fa-4x mt-5\"></i>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { activeNote } from '../../actions/note';\r\n\r\n\r\nexport const JournalEntry = ( {id, date, title, body, url}) => {\r\n\r\n    const dispatch = useDispatch();\r\n      \r\n    const momentDate = moment(date);\r\n\r\n    const note ={\r\n        date : date,\r\n        title:title,\r\n        body : body,\r\n        url:url\r\n    }\r\n   \r\n\r\n    const handleEntryClick = ()=>{\r\n        dispatch(activeNote(id, note));\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        \r\n        \r\n        <div\r\n        className=\"journal__entry animate__animated animate__fadeIn\"\r\n        onClick = {handleEntryClick}\r\n        >\r\n\r\n            { url &&\r\n                <div className =\"journal__entry-picture\"\r\n                style = {{\r\n                    backgroundSize: \"cover\",\r\n                    backgroundImage : `url(${url})`\r\n                }}\r\n                ></div>\r\n\r\n            }\r\n          \r\n\r\n\r\n            <div className=\"journal__entry-body\">\r\n                <p className =\"journal__entry-title\">\r\n                    {title}\r\n                </p>\r\n\r\n                <p className =\"journal__entry-content\">\r\n                    {body}\r\n                </p>\r\n\r\n            </div>\r\n\r\n            <div className=\"journal__entry-date-box\">\r\n                <span>{momentDate.format('dddd')}</span>\r\n                <h4>{momentDate.format('Do')}</h4>\r\n\r\n            </div>\r\n        </div>\r\n    \r\n        \r\n    )\r\n}\r\n","import React from 'react';\r\nimport {JournalEntry} from './JournalEntry';\r\nimport {useSelector} from 'react-redux';\r\n\r\nexport const JournalEntries = () => {\r\n\r\n    const {note} = useSelector(state => state.note);\r\n    \r\n\r\n    return (\r\n        \r\n        <div className = \"journal__entries\">\r\n\r\n            {\r\n                note.map(note =>(\r\n                    <JournalEntry \r\n                        key = {note.id} \r\n                        { ...note }\r\n                    />\r\n                ))\r\n            }\r\n            </div>\r\n        \r\n    );\r\n}\r\n","\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startLogout } from '../../actions/auth';\r\nimport { startNewNote } from '../../actions/note';\r\nimport { JournalEntries } from './JournalEntries'\r\n\r\nexport const Sidebar = () => {\r\n\r\n    const {name} = useSelector(state => state.auth)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogOutButton = ()=> {\r\n        dispatch(startLogout());\r\n       \r\n\r\n    }\r\n\r\n    const handleAddNote = () =>{\r\n        dispatch(startNewNote());\r\n    }\r\n\r\n\r\n    return (\r\n        //aside te indica que esto se encuentra en un costado\r\n        <aside className=\"journal__sidebar\">\r\n            <div className = \"journal__sidebar-navbar\">\r\n                <h3 className=\"mt-5\">\r\n                <i className=\"far fa-moon\"></i>\r\n                    <span> {name} </span>\r\n                </h3>\r\n                <button\r\n                    className = \"btn\"\r\n                    onClick = {handleLogOutButton}\r\n                > Logout\r\n                 </button>\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <div className= \"journal__new-entry\"\r\n                     onClick = {handleAddNote}   \r\n                >\r\n                \r\n                    <i className = \"far fa-calendar-plus fa-5x\"></i>\r\n                    <p className =\"mt-5\">New entry</p>\r\n                </div>\r\n\r\n            </div>\r\n           <JournalEntries />\r\n        </aside>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { NoteScreen } from '../notes/NoteScreen'\r\nimport { NothingSelected } from './NothingSelected'\r\n// import { NothingSelected } from './NothingSelected'\r\nimport { Sidebar } from './Sidebar'\r\n\r\nexport const JournalScreen = () => {\r\n\r\n    const {active} = useSelector(state => state.note)\r\n    return (\r\n        //el className tiene a journal y dos __ para indicar que todo lo referido a esas classes estara dentro de journal\r\n        <div className = \"journal__main-content animate__animated animate__fadeIn animate__faster\">\r\n\r\n            <Sidebar />\r\n        \r\n        <main>\r\n            {\r\n               (active !== null)\r\n               ? (<NoteScreen />)\r\n               : (<NothingSelected /> )\r\n\r\n            }\r\n\r\n        </main>\r\n        \r\n        \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {  startLoginEmailPassword , startGoogleLogin } from '../../actions/auth'\r\nimport { useForm } from '../hooks/useForm'\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    //con este Use selector puedo seleccionar una parte del objero de la tool Redux de mi pagina, en esete caso selecciono \"loading\".\r\n    const {loading} = useSelector(state => state.ui)\r\n\r\n    const [formuValues, handleInputChange,] = useForm ({\r\n        email: \"vignolo_3@hotmail.com\",\r\n        password : \"123456\"\r\n    });\r\n\r\n    const {email , password }= formuValues;\r\n\r\n    const handleLogin = (event)=>{\r\n        event.preventDefault();\r\n        dispatch(startLoginEmailPassword (email , password));\r\n       \r\n    }\r\n\r\n    const handleGoogleLogin = ()=>{\r\n        dispatch (startGoogleLogin ());\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n           <h3 className=\"auth__title\">Login</h3>\r\n           <form \r\n           className = \"animate__animated animate__fadeIn\"\r\n           onSubmit = {handleLogin}>\r\n\r\n            <input \r\n                type =\"text\"\r\n                placeholder = \"Email\"\r\n                name = \"email\"\r\n                className =\"auth__input\"\r\n                value = {email}\r\n                onChange = {handleInputChange}\r\n            /> \r\n\r\n            <input \r\n                type =\"password\"\r\n                placeholder = \"Password\"\r\n                name = \"password\"\r\n                className =\"auth__input\"\r\n                value = {password}\r\n                onChange = {handleInputChange}\r\n            /> \r\n\r\n            <button\r\n                type= \"submit\"\r\n                className = \"btn btn-primary btn-block\"\r\n                disabled={ loading } /* arriba seleccione la parte de este objeto con el useSelector, ahora cuando loading este en true (segung mi accion y el reducer) el boton andará, de lo contrario no. */\r\n            >\r\n                Login\r\n            </button>\r\n\r\n            \r\n            <div className =\"auth__social-networks\" >\r\n                <p className = \"mb-1\">Login with socail networks</p>\r\n                <div \r\n                        className=\"google-btn\"\r\n                        onClick = {handleGoogleLogin}\r\n                    >\r\n                        <div className=\"google-icon-wrapper\">\r\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"google button\" />\r\n                        </div>\r\n                        <p className=\"btn-text\">\r\n                            <b>Sign in with google</b>\r\n                        </p>\r\n                </div>\r\n            </div>\r\n            <Link \r\n            className = \"link\"\r\n            to =\"/auth/register\"\r\n            > \r\n                Create New Account\r\n            </Link>\r\n\r\n            \r\n           </form>\r\n        </>\r\n    )\r\n}\r\n","import { types } from \"../types/types\"\r\n\r\n\r\nexport const setError = (err)=>{\r\n    return {\r\n        type:types.uiSetError,\r\n        payload : err\r\n    }\r\n}\r\nexport const removeError = ()=>{\r\n    return {\r\n        type:types.uiRemoveError,\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useForm } from '../hooks/useForm'\r\nimport validator from 'validator'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { removeError, setError } from '../../actions/ui'\r\nimport { startRegisterWithEmailNamePassw } from '../../actions/auth'\r\n\r\nexport const RegisterScreeen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {msgError} = useSelector(state => state.ui);\r\n    \r\n\r\n    const [registerValues, handleRegister] = useForm ({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirm: \"\"\r\n    })\r\n\r\n    const {name , email , password, confirm } = registerValues;\r\n\r\n    const changeValues = (event)=>{\r\n        event.preventDefault();\r\n        \r\n\r\n        if (isFormValid()) {\r\n           dispatch(startRegisterWithEmailNamePassw(name, email, password));\r\n        }\r\n\r\n    }\r\n\r\n    const isFormValid = ()=> {\r\n\r\n        //buscar en npm validator\r\n\r\n        if (name.trim().length === 0){\r\n            dispatch (setError(\"Name is required \"));\r\n            return false\r\n        }else if (!validator.isEmail(email)) {\r\n            dispatch (setError(\"Email is not valid\"));\r\n            return false\r\n        } else if ( password !== confirm || password.length < 6){\r\n            dispatch (setError(\"Password should be at leat 6 characters or this is not matching\"));\r\n            return false\r\n        }\r\n\r\n        dispatch(removeError());\r\n        return true;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"auth__title\">Register</h3>\r\n        <form\r\n         className = \"animate__animated animate__fadeIn\"\r\n         onSubmit = {changeValues}>\r\n\r\n       {/* es condicional, solo aparecera si esta el error  */}\r\n        {\r\n            msgError && (\r\n                <div className = \"auth__alert-error\">\r\n                     {msgError}\r\n                </div>\r\n            )\r\n           \r\n\r\n        }\r\n       \r\n\r\n        <input \r\n             type =\"text\"\r\n             placeholder = \"Name\"\r\n             name = \"name\"\r\n             className =\"auth__input\"\r\n             value = {name}\r\n             onChange = {handleRegister}\r\n         /> \r\n\r\n         <input \r\n             type =\"text\"\r\n             placeholder = \"Email\"\r\n             name = \"email\"\r\n             className =\"auth__input\"\r\n             value = {email}\r\n             onChange = {handleRegister}\r\n         /> \r\n\r\n         <input \r\n             type =\"password\"\r\n             placeholder = \"Password\"\r\n             name = \"password\"\r\n             className =\"auth__input\"\r\n             value = {password}\r\n             onChange = {handleRegister}\r\n         /> \r\n\r\n        \r\n        <input \r\n             type =\"password\"\r\n             placeholder = \"Confirm Password\"\r\n             name = \"confirm\"\r\n             className =\"auth__input\"\r\n             value = {confirm}\r\n             onChange = {handleRegister}\r\n         /> \r\n\r\n         <button\r\n             type= \"submit\"\r\n             className = \"btn btn-primary btn-block mb-5\"\r\n         >\r\n             Register\r\n         </button>\r\n\r\n         \r\n         \r\n         <Link \r\n         className = \"link mt-5\"\r\n         to =\"/auth/login\"\r\n         > \r\n             Already registered?\r\n         </Link>\r\n\r\n         \r\n        </form>\r\n     </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router';\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { RegisterScreeen } from '../components/auth/RegisterScreeen';\r\n\r\n\r\n\r\nexport const AuthRouters = () => {\r\n    return (\r\n        <>\r\n             \r\n            <div className= \"auth__main\">\r\n            <div className=\"auth__box-conteiner\">\r\n            <Switch>\r\n                <Route path =\"/auth/login\" component={LoginScreen} />\r\n                <Route path =\"/auth/register\" component={RegisterScreeen} />\r\n           \r\n\r\n\r\n                <Redirect to=\"/auth/login\" />\r\n                </Switch>\r\n\r\n            </div>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router';\r\n\r\n\r\n/*isAuthenticated no es otra cosa que un simple atributo que luego le doy la calidad de estado inicial en AuthRouters */\r\n\r\nconst PrivateRoute =  ({\r\n\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return(\r\n        <Route {...rest} \r\n        component = { (props) => (\r\n\r\n            (isAuthenticated)\r\n                ? (<Component {...props} />)\r\n                : (<Redirect to = \"/auth/login\" />)\r\n\r\n        ) }\r\n        />\r\n \r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default PrivateRoute\r\n","import { Redirect, Route } from \"react-router\";\r\n\r\n\r\n\r\nconst PublicRoute = ({\r\n    isAuthenticated ,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return(\r\n        <Route {...rest} \r\n        component = { (props) => (\r\n\r\n            (!isAuthenticated)\r\n                ? (<Component {...props} />)\r\n                : (<Redirect to = \"/\" />)\r\n\r\n\r\n        ) }\r\n        />\r\n\r\n\r\n        \r\n    )\r\n  \r\n}\r\n\r\nexport default PublicRoute;","import { getAuth, onAuthStateChanged } from '@firebase/auth';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect,\r\n  } from \"react-router-dom\";\r\nimport { login } from '../actions/auth';\r\nimport {  startLoginNotes } from '../actions/note';\r\n\r\nimport { JournalScreen } from '../components/journal/JournalScreen'\r\n\r\nimport { AuthRouters } from './AuthRouters'\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\n\r\nexport const AppRouters = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n/*un useState para verificar que mi app ya termino de cargar o no, lo que me va a decir si tengo el ususario\r\no no para ver que hacer, si esta en true, todav{ia esta cargando} */\r\n    const [cheking, setChecking] = useState(true);\r\n\r\n\r\n  /* ahora un nuevo use state que me va a decir  a donde mandar el usuario, con el anterior useState\r\n  ya recibí la información para saber si lo dejo entrar o no, ahora lo debo enviar */  \r\n    const [isLogeedIn, setisLogeedIn] = useState(false)\r\n\r\n\r\n   /* firebase me va a avisar cuando la autenticación cambia, con eso que me da, debo hacer algo. \r\n    para lo que voy a usar un useEffect. Al no haber nada en el [], solo se ejecutara cuando el\r\n   estado de la authentication cambie.\r\n   se pone aqui el useEffec debido a que la funcion es sincrona, por lo cual el use effect sera un freno \r\n   que re diriga al usuario o al journalscreen or al authrouter*/\r\n   useEffect(() => {\r\n    const auth = getAuth();\r\n    onAuthStateChanged(auth,(user)=>{\r\n       \r\n        if(user?.uid){\r\n            dispatch (login(user.uid, user.displayName));\r\n            setisLogeedIn(true)\r\n            dispatch(startLoginNotes(user.uid))\r\n        } else{\r\n            setisLogeedIn(false)\r\n        }\r\n        setChecking(false)\r\n        \r\n\r\n    })      \r\n   }, [dispatch, setChecking, setisLogeedIn])\r\n\r\n   if (cheking){\r\n       return(\r\n        <h1>Espere...</h1>\r\n       )\r\n      \r\n   }\r\n\r\n\r\n    return (\r\n       <Router>\r\n           <div>\r\n               <Switch>\r\n                    <PublicRoute\r\n                    path = \"/auth\"\r\n                    component = {AuthRouters}\r\n                    isAuthenticated = {isLogeedIn}\r\n                    />\r\n\r\n                    <PrivateRoute\r\n                    exact\r\n                    path = \"/\"\r\n                    component = {JournalScreen}\r\n                    isAuthenticated = {isLogeedIn}\r\n                     />\r\n\r\n                    <Redirect to=\"/auth/login\" />\r\n\r\n               </Switch>\r\n           </div>\r\n       </Router>\r\n    )\r\n}\r\n","\r\n/*\r\ninitialState = {\r\n    note :[],\r\n    active : null,                     (nota activa = null, pantalla morada) \r\n    active : {\r\n        id : sdfasefas5a,\r\n        title : \"\",                     (nota activa, pantalla en blanco)\r\n        body : \"\",\r\n        imageUrl : \"\";\r\n        date : 123485566\r\n\r\n    }\r\n}\r\n*/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    note :[],\r\n    active : null                  \r\n}\r\n\r\nexport const noteReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case types.noteActive : {\r\n            return{ \r\n                ...state,\r\n                active : {\r\n                    ...action.payload\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        /*action.payloas, es la nota nueva, y esa la agrego a las preexistentes que son ...state.note\r\n        todas dentro de un array, que es la estrucutura de mis notas*/\r\n        case types.noteAddNew:\r\n            return{\r\n                ...state,\r\n                note: [action.payload, ...state.note]\r\n            }\r\n        \r\n        case types.noteLoad :\r\n            return {\r\n                ...state,\r\n                note : [ ...action.payload]\r\n\r\n            }\r\n\r\n        case types.noteUpDated:\r\n            return{\r\n                ...state,\r\n                note: state.note.map(note =>(\r\n                    note.id === action.payload.id \r\n                    ? action.payload.note\r\n                    : note\r\n                ))\r\n\r\n            }\r\n\r\n            /* la nota active la pasa a null y el nuevo estado me devolvera todas\r\n            las notas que su id sea distinto al id de la que voy  eliminar */\r\n        case types.noteDelete:\r\n            return{\r\n                ...state,\r\n                active : null,\r\n                note: state.note.filter(note =>(\r\n                    note.id !==action.payload.id \r\n                ))\r\n                \r\n            }\r\n\r\n        case types.noteLogoutCleaning:\r\n            return{\r\n                ...state,\r\n                note: action.payload\r\n            }\r\n\r\n        \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","import { types } from \"../types/types\";\r\n\r\n\r\n//mi estado inicial sera este:\r\nconst initialState = {\r\n    loading : false,\r\n    msgError: null,\r\n\r\n}\r\n\r\nexport const uiReducer = (state = initialState, action )=> {\r\n\r\n    switch (action.type) {\r\n        case types.uiSetError:\r\n            // aqui me tira el estado inicial pero con un error.\r\n            return {\r\n                ...state,\r\n                msgError : action.payload\r\n            }\r\n        case types.uiRemoveError:\r\n            // aqui en cambio retorna nuevamente el message en null.\r\n            return {\r\n                ...state,\r\n                msgError: null,\r\n            } \r\n            \r\n        case types.uiStartLoading:\r\n            return{\r\n                ...state,\r\n                loading:action.payload\r\n            }\r\n\r\n        case types.uiFinishLoading:\r\n            return{\r\n                ...state,\r\n                loading:action.payload\r\n            }\r\n\r\n\r\n            \r\n       \r\n    \r\n        default:\r\n            return state;\r\n         \r\n    }\r\n\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { authReducer } from \"../reducers/authReducer\";\r\nimport { noteReducer } from \"../reducers/noteReducer\";\r\nimport { uiReducer } from \"../reducers/uiReducer\";\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    ui: uiReducer,\r\n    note:noteReducer,\r\n    \r\n});\r\n\r\n\r\n\r\n\r\n/* este createStore acepta solo un reducer, es por eso que debo\r\n crear la constante conbineReducer, de esta forma podré poner mas....\r\n  el texto window +++ sale de error que tengo en el redux de mi consola */\r\nexport const store = createStore (\r\n    reducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    ) \r\n    );","/*\r\nmi state va a estar bacío cuando yo no este authenticado, { }\r\n\r\nEn cambio cuando este authenticado, tendré:\r\n{\r\n    uid: \"215464dasd1a3s5d4a65s4da\"\r\n    name : \"Lorenzo\"\r\n}\r\n\r\n*/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\n /* Action ahora no tiene nada, pero luego va a ser un objeto\r\n    que action = {\r\n            type = \"login\"\r\n            payload ={\r\n                uid : \"asd45as65d4a6sd\"\r\n                displayNmae: \"Lorenzo\"\r\n            }\r\n    } */\r\n\r\nexport const authReducer = (state = {}, action) => {\r\n \r\n   //si acion type (action.type) es igual a login (types.login), return un objeto con las siguentes caract:\r\n   /* return{\r\n                uid: action.payload.uid,\r\n                name: action.payload.displayName\r\n            }\r\n            \r\n    la caul saldr{a de mi accion que tiene las siguientes caracteristicas\r\n    mi accion==>    const login = (uid, displayName)=>{\r\n                            return {\r\n                                type: types.login,\r\n                                payload: {\r\n                                    uid,\r\n                                    displayName\r\n                                }\r\n                            }\r\n                        }\r\n\r\n        La accion activa al reducer                \r\n        */\r\n\r\n\r\n    switch (action.type) {\r\n        case types.login:\r\n            return{\r\n                uid: action.payload.uid,\r\n                name: action.payload.displayName\r\n            }\r\n        \r\n        case types.logout:\r\n            return{  }\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { AppRouters } from './routers/AppRouters';\r\nimport { store } from './store/store';\r\n\r\n\r\nexport const JournalApp = () => {\r\n    return (\r\n        <>\r\n            <Provider store= {store}>\r\n                <AppRouters />\r\n            </Provider>\r\n           \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { JournalApp } from './JournalApp';\nimport \"./styles/styles.scss\"\n\n\nReactDOM.render(\n \n    <JournalApp />,\n \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}